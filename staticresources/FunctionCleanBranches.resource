{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v56.0/sobjects/copado__Function__c/a1S5w000004pPVvEAM"
          },
          "copado__API_Name__c": "cbrCleanupDXCLI",
          "copado__Description__c": "A \"functionized\" version of the original Apex script for cleaning-up Copado records and branches and records",
          "copado__Image_Name__c": "copado-function-core:v1",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : true,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"keepBranches\",\n  \"defaultValue\" : \"['dev','dev1','dev2','dev3','int','qa','staging','master']\"\n}, {\n  \"required\" : true,\n  \"name\" : \"removeRecordsOlderThanXDays\",\n  \"defaultValue\" : \"1\"\n}, {\n  \"required\" : true,\n  \"name\" : \"validateOnly\",\n  \"defaultValue\" : \"false\"\n} ]",
          "copado__Script__c": "#!/usr/bin/env node\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n//   Script: branch/record cleanup function\n// Modified: 20220824\n//   Author: Andrew Durrans (Copado)\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n// INIT                                            //\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\nconst fs = require('fs');\nconst execSync = require('child_process').execSync;\nlog2CopadoStatus('<<< START >>>');\n\nvar command = '', result = '', jsonData = '', deleteBranches = '', deleteRecords = '';\nvar deleteRec2Branch = [];\nconst validateOnly = eval(process.env.validateOnly);\nconst keepBranches = eval(process.env.keepBranches);\nconst daysAgo = process.env.removeRecordsOlderThanXDays;\nconst outputCSV = '/app/records.csv';\nconst adjDate = new Date(new Date().setDate(new Date().getDate() - daysAgo)).toISOString().split('T')[0]+\"T00:00:00Z\";\nconst isoDateString = new Date().toISOString();\nconst brcReport = '/app/brcreport_' + isoDateString.replace(/\\:|\\.|-/g, '') + '.txt';\nvar report = `----------------------------------------------------------------------\nCOPADO BRANCH/RECORD CLEANUP (${isoDateString})\n----------------------------------------------------------------------\nAttempting to remove branches/records older than: ${daysAgo} days (${adjDate})\\n`;\nvar totalRecords = 0;\nvar csvError = false;\nvar branchCleanupComplete = false;\nvar processMsg = 'FAILED';\nvar sfSessionId = process.env.CF_SF_SESSIONID;\nconst sfHost = process.env.CF_SF_ENDPOINT;\nconst query = `SELECT Id, Name, copado__Branch__c, copado__Deployment__c, copado__Deployment__r.Name, copado__Status__c, copado__CheckOnly__c\n    FROM copado__Step__c\n    WHERE LastModifiedDate <= ${adjDate} AND copado__Branch__c != null AND copado__Deployment__r.copado__Promotion__c != null\n    AND (copado__Status__c = 'Completed with Errors' OR ( copado__CheckOnly__c  = TRUE AND copado__Status__c = 'Completed Successfully'))\n    ORDER BY copado__Status__c`;\n//debug\n//console.log(process.env); // GLOBALS\n//console.log(`${daysAgo} | ${keepBranches} | ${validateOnly}`);\n//console.log(typeof keepBranches);\n//console.log(typeof validateOnly);\n//console.log(adjDate);\n//console.log(query);\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n// DXCLI: Query & JSON-parsing                        //\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\nlog2CopadoStatus('DXCLI: branch & record query...');\n\nif(validateOnly)\n{\n    processMsg = 'VALIDATE ONLY (NO CHANGES WILL BE MADE)';\n    console.log(processMsg);\n    report += `\\n *** ${processMsg} *** \\n\\n`;\n    report += 'Query: ' + query + '\\n\\n';\n}\n\nif(sfSessionId.length > 0)\n{\n    console.log('DXCLI: query...');\n    customExecSync(\n    `\n        SFDX_JSON_TO_STDOUT=true\n        sfdx force:config:set instanceUrl=\"${sfHost}\" -g --json 2> /dev/null\n    `);\n    command = `sfdx force:data:soql:query -q \"${query}\" -u ${sfSessionId} --json 2> /dev/null`;\n    result = customExecSync(command);\n    if(result.length > 0)\n    {\n        //debug\n        //console.log(result);\n\n        console.log('DXCLI: parsing response...');\n        try\n        {\n            jsonData = JSON.parse(result);\n            //debug\n            //console.log(jsonData);\n            \n            totalRecords = jsonData.result.totalSize;\n            report += 'Total items to cleanup: ' + totalRecords + '\\n\\n';\n            console.log('DXCLI: total records returned: ' + totalRecords);\n\n            if(totalRecords > 0)\n            {\n                console.log('DXCLI: creating branch and record lists...');\n                deleteRecords = 'Id\\n';\n                Object.entries(jsonData.result.records).forEach((entry) =>\n                {\n                    const [key, value] = entry;\n                    if(!keepBranches.includes(value.copado__Branch__c))\n                    {\n                        deleteRec2Branch[value.copado__Deployment__c] = value.copado__Branch__c;\n                        deleteBranches += ((deleteBranches.length > 0) ? ' ' : '') + value.copado__Branch__c;\n                        deleteRecords += value.copado__Deployment__c + '\\n';\n                    }\n                });\n                \n                fs.writeFileSync(outputCSV, deleteRecords, {flag: 'w+'});\n                if(parseInt(execSync(`wc -l < ${outputCSV}`).toString().trim()-1 != totalRecords))\n                {\n                    csvError = true;\n                }\n                \n                if(validateOnly)\n                {\n                    report += 'deleteBranches list: ' + deleteBranches + '\\n\\n';\n                    report += 'deleteRecords list: (refer to ' + outputCSV.split('/')[2] + ')\\n\\n';\n                }\n\n                customExecSync(`copado -u ${outputCSV}`);\n            }\n            else\n            {\n                console.log('DXCLI: 0 records found');\n                processMsg = 'SUCCESS'\n            }\n        }\n        catch(err)\n        {\n            console.log(err);\n            csvError = true;\n        }\n    }\n    else\n    {\n        console.log('DXCLI: unable to parse response: ' + result);\n    }\n}\nelse\n{\n    console.log('DXCLI: invalid session token');\n}\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n// GIT: DELETE BRANCHES                            //\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\nlog2CopadoStatus('BRANCH MGMT: cleanup branches...');\nreport += '[BRANCH MGMT]\\n';\n\nif(deleteBranches.length > 0 && !csvError)\n{\n    console.log('BRANCH MGMT: clone repo...');\n    customExecSync('copado-git-get --depth 1 main');\n    command = `git push origin -d ${deleteBranches}`;\n    console.log('BRANCH MGMT: branch cleanup command: ' + command);\n    if(!validateOnly)\n    {\n        if(customExecSync(command, true))\n        {\n            console.log('BRANCH MGMT: branches successfully deleted!');\n            branchCleanupComplete = true;\n        }\n        else\n        {\n            console.log('BRANCH MGMT: unable to delete branches: ' + deleteBranches);\n        }\n        for(const key in deleteRec2Branch)\n        {\n            report += 'BRANCH (sfid=' + key + '): ' + deleteRec2Branch[key] + ' | STATUS: ' + ((branchCleanupComplete) ? 'deleted' : 'failed') + '\\n';\n        }\n    }\n    else\n    {\n        console.log('BRANCH MGMT: VALIDATION ONLY - NO CHANGES MADE');\n        branchCleanupComplete = true;\n    }\n}\nelse\n{\n    console.log('BRANCH MGMT: no branches to delete');\n}\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n// DXCLI: DELETE RECORDS                              //\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\nlog2CopadoStatus('DXCLI: cleanup records...');\nreport += '\\n[SF RECORD MGMT]\\n';\n\nif(branchCleanupComplete && !csvError)\n{\n    command = `sfdx force:data:bulk:delete -s copado__Deployment__c -f ${outputCSV} -u ${sfSessionId} --json 2> /dev/null`;\n    console.log('DXCLI: record cleanup command: ' + command);\n    if(!validateOnly)\n    {\n        result = customExecSync(command);\n        if(result.length > 0)\n        {\n            //debug\n            //console.log(result);\n            \n            console.log('DXCLI: parsing response...');\n            try\n            {\n                jsonData = JSON.parse(result);\n                //debug\n                //console.log(jsonData.result);\n                                \n                let jobId = jsonData.result[0].jobId;\n                let jobRecordsProcessed = 0, jobRecordsFailed = 0, jobState = '', reportSummary = '';\n                let i = 1;\n                while (i <= 30)\n                {\n                    console.log('DXCLI: checking batch processing status...');\n                    log2CopadoStatus('DXCLI: checking batch processing status...');\n                    result = customExecSync(`sfdx force:data:bulk:status -i ${jobId} -u ${sfSessionId} --json 2> /dev/null`);\n                    if(result.length > 0)\n                    {\n                        //debug\n                        //console.log(result);\n\n                        console.log('DXCLI: parsing response...');\n                        jsonData = JSON.parse(result);\n                        //debug\n                        console.log(jsonData.result);\n\n                        jobState = jsonData.result.state;\n                        console.log('DXCLI: current batch state: ' + jobState);\n                        log2CopadoStatus('DXCLI: current batch state: ' + jobState);\n\n                        jobBatchesTotal = jsonData.result.numberBatchesTotal;\n                        jobBatchesCompleted = jsonData.result.numberBatchesCompleted;\n                        jobBatchesFailed = jsonData.result.numberBatchesFailed;\n                        jobRecordsProcessed = jsonData.result.numberRecordsProcessed;\n                        jobRecordsFailed = jsonData.result.numberRecordsFailed;\n                        reportSummary = 'Records Processed: ' + jobRecordsProcessed + '\\n' +\n                            'Records Failed: ' + jobRecordsFailed + '\\n' +\n                            'Final Job State: ' + jobState + '\\n';\n\n                        if(jobState == 'Closed')\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        console.log('DXCLI: unable to parse response (bulk delete status): ' + result);\n                        break;\n                    }\n                    execSync('sleep 10');\n                    i++;\n                }\n\n                let msg1 = '\\n', msg2 = '\\n';\n                if(jobState == 'Closed' && jobRecordsFailed == 0 && jobRecordsProcessed > 0)\n                {\n                    console.log('DXCLI: records successfully deleted!');\n                    report += reportSummary;\n                    processMsg = 'SUCCESSFUL';\n                }\n                else\n                {\n                    msg1 = 'One or more deployment records could not be deleted\\n';\n                    msg2 = 'Please verify the deployment record(s) listed in ' + outputCSV.split('/')[2] + ' and remove them manually as necessary\\n';\n                    report += reportSummary + '\\n';\n                    report += '\\n[NOTICE]\\n' + msg1 + '\\n[ACTION REQUIRED]\\n' + msg2;\n                    console.log('DXCLI: ' + msg1);\n                    console.log('DXCLI: ' + msg2);\n                }\n            }\n            catch(err)\n            {\n                console.log(err);\n            }\n        }\n        else\n        {\n            console.log('DXCLI: unable to parse response (bulk delete): ' + result);\n        }\n    }\n    else\n    {\n        console.log('DXCLI: VALIDATION ONLY - NO CHANGES MADE');\n    }\n}\nelse\n{\n    console.log('DXCLI: branch cleanup did not occur - skipping record cleanup');\n}\n\nreport += '\\n[OVERALL PROCESS]\\nSTATUS: ' + processMsg;\ncommand =\n`\n    echo \"${report}\" > ${brcReport}\n    copado -u ${brcReport}\n`;\ncustomExecSync(command);\nlog2CopadoStatus('<<< FUNCTION: END >>>');\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\n// FUNCTIONS                                       //\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //\nfunction log2CopadoStatus(msg)\n{\n    execSync(\"copado -p '\" + msg + \"'\");\n}\nfunction customExecSync(command, ignoreOutput = false)\n{\n    let result = '';\n    \n    try\n    {\n        if(ignoreOutput === false)\n        {\n            result = execSync(command).toString();\n        }\n        else\n        {\n            execSync(command, {stdio: 'ignore'});\n            result = true;\n        }\n    }\n    catch(err)\n    {\n        console.log('command [' + command + '] failed: ' + err);\n        result = false;\n    }\n    \n    return result;\n}",
          "copado__Timeout__c": 10,
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "CurrencyIsoCode": "EUR",
          "Id": "a1S5w000004pPVvEAM",
          "LastReferencedDate": "2022-10-25T08:16:57.000+0000",
          "LastViewedDate": "2022-10-25T08:16:57.000+0000",
          "Name": "Copado Branch & Record Cleanup"
        }
      ],
      "ObjectType": "copado__Function__c"
    }
  ],
  "blobsByUID": {}
}