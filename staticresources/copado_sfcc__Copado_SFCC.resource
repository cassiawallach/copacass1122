{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v56.0/sobjects/copado__JobTemplate__c/a0w7Q0000021z2IQAQ"
          },
          "copado__ApiName__c": "copado_sfcc_deploy_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0w7Q0000021z2IQAQ",
          "Name": "copado_sfcc_deploy"
        },
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v56.0/sobjects/copado__JobTemplate__c/a0w7Q0000021z2NQAQ"
          },
          "copado__ApiName__c": "copado_sfcc_commit_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0w7Q0000021z2NQAQ",
          "Name": "copado_sfcc_commit"
        },
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v56.0/sobjects/copado__JobTemplate__c/a0w7Q0000021z2SQAQ"
          },
          "copado__ApiName__c": "copado_sfcc_promote_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0w7Q0000021z2SQAQ",
          "Name": "copado_sfcc_promote"
        }
      ],
      "ObjectType": "copado__JobTemplate__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v56.0/sobjects/copado__JobStep__c/a0v7Q000000F6NjQAK"
          },
          "copado__ApiName__c": "copado_sfcc_deploy_1_copado_sfcc_deploy_0",
          "copado__ConfigJson__c": "{\"functionName\": \"copado_sfcc_deploy\", \"parameters\": [{\"name\": \"COPADO_DEVOPSTOOLS_URL\", \"value\": \"{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}\"}, {\"name\": \"git_json\", \"value\": \"{$Context.Repository.Credential}\"}, {\"name\": \"git_email\", \"value\": \"{$User.Email}\"}, {\"name\": \"git_name\", \"value\": \"{$User.Name}\"}, {\"name\": \"git_depth\", \"value\": \"{$Pipeline.property.git_depth}\"}, {\"name\": \"file_changes_id\", \"value\": \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"}, {\"name\": \"promotion_branch\", \"value\": \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"}, {\"name\": \"target_branch\", \"value\": \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"}, {\"name\": \"replacement_rules\", \"value\": \"{$Pipeline.property.replacement_rules}\"}, {\"name\": \"environment_variables\", \"value\": \"{$Destination.apex.EnvironmentVariables}\"}, {\"name\": \"release_version\", \"value\": \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"}, {\"name\": \"deploy_id\", \"value\": \"{$Job.ExecutionParent.Id}\"}, {\"name\": \"dry_run\", \"value\": \"{$Context.JobExecution__r.DataJson.deploymentDryRun}\"}, {\"name\": \"builder_config\", \"value\": \"{$Destination.property.builder_config}\"}, {\"name\": \"COPADO_DEBUG_MODE\", \"value\": \"{$Pipeline.property.COPADO_DEBUG_MODE}\"}, {\"name\": \"SFCC_FORMAT\", \"value\": \"{$Pipeline.property.COPADO_CHANGE_TRACK_TYPE}\"}, {\"name\": \"SFCC_INSTANCE\", \"value\": \"{$Destination.property.SFCC_INSTANCE}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_ID\", \"value\": \"{$Destination.property.SFCC_OAUTH_CLIENT_ID}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_SECRET\", \"value\": \"{$Destination.property.SFCC_OAUTH_CLIENT_SECRET}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_ID1\", \"value\": \"{$Pipeline.property.SFCC_OAUTH_CLIENT_ID}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_SECRET1\", \"value\": \"{$Pipeline.property.SFCC_OAUTH_CLIENT_SECRET}\"}, {\"name\": \"SFCC_USERNAME\", \"value\": \"{$Destination.property.SFCC_USERNAME}\"}, {\"name\": \"SFCC_PASSWORD\", \"value\": \"{$Destination.property.SFCC_PASSWORD}\"}, {\"name\": \"SFCC_USERNAME1\", \"value\": \"{$Pipeline.property.SFCC_USERNAME}\"}, {\"name\": \"SFCC_PASSWORD1\", \"value\": \"{$Pipeline.property.SFCC_PASSWORD}\"}, {\"name\": \"SFCC_METADATA_DIRECTORY\", \"value\": \"{$Pipeline.property.SFCC_METADATA_DIRECTORY}\"}, {\"name\": \"SFCC_SFRA_DIRECTORY\", \"value\": \"{$Pipeline.property.SFCC_SFRA_DIRECTORY}\"}, {\"name\": \"SFCC_PWA_DIRECTORY\", \"value\": \"{$Pipeline.property.SFCC_PWA_DIRECTORY}\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0w7Q0000021z2IQAQ",
          "copado__Order__c": 0,
          "copado__Type__c": "Function",
          "Id": "a0v7Q000000F6NjQAK",
          "Name": "copado_sfcc_deploy"
        },
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v56.0/sobjects/copado__JobStep__c/a0v7Q000000F6NoQAK"
          },
          "copado__ApiName__c": "copado_sfcc_commit_1_copado_sfcc_commit_0",
          "copado__ConfigJson__c": "{\"functionName\": \"copado_sfcc_commit\", \"parameters\": [{\"name\": \"COPADO_DEVOPSTOOLS_URL\", \"value\": \"{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}\"}, {\"name\": \"git_json\", \"value\": \"{$Context.Repository.Credential}\"}, {\"name\": \"git_email\", \"value\": \"{$User.Email}\"}, {\"name\": \"git_name\", \"value\": \"{$User.Name}\"}, {\"name\": \"git_depth\", \"value\": \"{$Pipeline.property.git_depth}\"}, {\"name\": \"file_changes_id\", \"value\": \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"}, {\"name\": \"feature_branch\", \"value\": \"{$Context.JobExecution__r.DataJson.featureBranchName}\"}, {\"name\": \"recreate_if_exists\", \"value\": \"{$Context.JobExecution__r.DataJson.recreateFeatureBranch}\"}, {\"name\": \"commit_message\", \"value\": \"{$Context.JobExecution__r.DataJson.message}\"}, {\"name\": \"base_branch\", \"value\": \"{$Context.JobExecution__r.DataJson.baseBranch}\"}, {\"name\": \"replacement_rules\", \"value\": \"{$Pipeline.property.replacement_rules}\"}, {\"name\": \"environment_variables\", \"value\": \"{$Source.apex.EnvironmentVariables}\"}, {\"name\": \"executeCommit\", \"value\": \"{$Context.JobExecution__r.DataJson.executeCommit}\"}, {\"name\": \"COPADO_DEBUG_MODE\", \"value\": \"{$Pipeline.property.COPADO_DEBUG_MODE}\"}, {\"name\": \"SFCC_FORMAT\", \"value\": \"{$Pipeline.property.COPADO_CHANGE_TRACK_TYPE}\"}, {\"name\": \"SFCC_INSTANCE\", \"value\": \"{$Source.property.SFCC_INSTANCE}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_ID\", \"value\": \"{$Source.property.SFCC_OAUTH_CLIENT_ID}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_SECRET\", \"value\": \"{$Source.property.SFCC_OAUTH_CLIENT_SECRET}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_ID1\", \"value\": \"{$Pipeline.property.SFCC_OAUTH_CLIENT_ID}\"}, {\"name\": \"SFCC_OAUTH_CLIENT_SECRET1\", \"value\": \"{$Pipeline.property.SFCC_OAUTH_CLIENT_SECRET}\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0w7Q0000021z2NQAQ",
          "copado__Order__c": 0,
          "copado__Type__c": "Function",
          "Id": "a0v7Q000000F6NoQAK",
          "Name": "copado_sfcc_commit"
        },
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v56.0/sobjects/copado__JobStep__c/a0v7Q000000F6NtQAK"
          },
          "copado__ApiName__c": "copado_sfcc_promote_1_copado_sfcc_promote_0",
          "copado__ConfigJson__c": "{\"functionName\": \"copado_sfcc_promote\", \"parameters\": [{\"name\": \"COPADO_DEVOPSTOOLS_URL\", \"value\": \"{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}\"}, {\"name\": \"git_json\", \"value\": \"{$Context.Repository.Credential}\"}, {\"name\": \"git_email\", \"value\": \"{$User.Email}\"}, {\"name\": \"git_name\", \"value\": \"{$User.Name}\"}, {\"name\": \"git_depth\", \"value\": \"{$Pipeline.property.git_depth}\"}, {\"name\": \"file_changes_id\", \"value\": \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"}, {\"name\": \"promotion_branch\", \"value\": \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"}, {\"name\": \"target_branch\", \"value\": \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"}, {\"name\": \"user_stories\", \"value\": \"{$Context.JobExecution__r.DataJson.userStoryBranches}\"}, {\"name\": \"promotion_id\", \"value\": \"{$Job.ExecutionParent.Id}\"}, {\"name\": \"repository_id\", \"value\": \"{$Pipeline.Git_Repository__r.Id}\"}, {\"name\": \"release_version\", \"value\": \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"}, {\"name\": \"exclude_autoresolve\", \"value\": \"{$Pipeline.property.exclude_autoresolve}\"}, {\"name\": \"conflict_resolution_attachments\", \"value\": \"{$Context.apex.GetConflictResolutionAttachments}\"}, {\"name\": \"smart_conflict_resolution_enabled\", \"value\": \"{$Pipeline.property.smart_conflict_resolution_enabled}\"}, {\"name\": \"COPADO_DEBUG_MODE\", \"value\": \"{$Pipeline.property.COPADO_DEBUG_MODE}\"}]}",
          "copado__CustomType__c": "Function",
          "copado__JobTemplate__c": "a0w7Q0000021z2SQAQ",
          "copado__Order__c": 0,
          "copado__Type__c": "Function",
          "Id": "a0v7Q000000F6NtQAK",
          "Name": "copado_sfcc_promote"
        }
      ],
      "ObjectType": "copado__JobStep__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v56.0/sobjects/copado__Function__c/a0n7Q000000IFqUQAW"
          },
          "copado__API_Name__c": "copado_sfcc_deploy",
          "copado__Image_Name__c": "xa8dyypiudcgpewgbkt69xfy1ibhap-custom-image:v1.0.2-develop",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"COPADO_DEVOPSTOOLS_URL\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"target_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"replacement_rules\",\n  \"defaultValue\" : \"{$Pipeline.property.replacement_rules}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"environment_variables\",\n  \"defaultValue\" : \"{$Destination.apex.EnvironmentVariables}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"release_version\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"deploy_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"dry_run\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.deploymentDryRun}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"builder_config\",\n  \"defaultValue\" : \"{$Destination.property.builder_config}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"COPADO_DEBUG_MODE\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_DEBUG_MODE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_FORMAT\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_CHANGE_TRACK_TYPE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_INSTANCE\",\n  \"defaultValue\" : \"{$Destination.property.SFCC_INSTANCE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_ID\",\n  \"defaultValue\" : \"{$Destination.property.SFCC_OAUTH_CLIENT_ID}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_SECRET\",\n  \"defaultValue\" : \"{$Destination.property.SFCC_OAUTH_CLIENT_SECRET}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_ID1\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_OAUTH_CLIENT_ID}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_SECRET1\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_OAUTH_CLIENT_SECRET}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_USERNAME\",\n  \"defaultValue\" : \"{$Destination.property.SFCC_USERNAME}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_PASSWORD\",\n  \"defaultValue\" : \"{$Destination.property.SFCC_PASSWORD}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_USERNAME1\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_USERNAME}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_PASSWORD1\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_PASSWORD}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_METADATA_DIRECTORY\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_METADATA_DIRECTORY}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_SFRA_DIRECTORY\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_SFRA_DIRECTORY}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_PWA_DIRECTORY\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_PWA_DIRECTORY}\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -eo pipefail\nexport SHELLOPTS # export the settings for all subshells. Be careful with the \"u\" flag, some tools (maven) fails.\n\n# the following line should be removed in the actual production Functions. It is used for internal testing and development\nif [ -n \"${COPADO_DEVOPSTOOLS_URL:-}\" ]; then pip install --user \"$COPADO_DEVOPSTOOLS_URL\"  ${COPADO_DEVOPSTOOLS_VERSION:+\"$COPADO_DEVOPSTOOLS_VERSION\"}; export PATH=$PATH:~/.local/bin; echo \"(${SECONDS}s elapsed)\"; echo; fi\ncd /app\n\nsource copado_init\n# the next two lines are for testing/development/troubleshooting only:\n#function_image xa8dyypiudcgpewgbkt69xfy1ibhap-custom-image:v1.0.2-develop\nfunction_parameter COPADO_DEVOPSTOOLS_URL '{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}' --optional \"\"\n\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}' --optional \"100\"\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter promotion_branch '{$Context.JobExecution__r.DataJson.promotionBranchName}'\nfunction_parameter target_branch '{$Context.JobExecution__r.DataJson.destinationBranchName}'\nfunction_parameter replacement_rules '{$Pipeline.property.replacement_rules}' --optional \"\"\nfunction_parameter environment_variables '{$Destination.apex.EnvironmentVariables}' --optional \"\"\nfunction_parameter release_version '{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}' --optional \"0.0.1\"\nfunction_parameter deploy_id '{$Job.ExecutionParent.Id}'\nfunction_parameter dry_run '{$Context.JobExecution__r.DataJson.deploymentDryRun}'\nfunction_parameter builder_config '{$Destination.property.builder_config}' --optional \"\"\nfunction_parameter COPADO_DEBUG_MODE '{$Pipeline.property.COPADO_DEBUG_MODE}' --optional \"0\"\n# sfcc-specific parameters\nfunction_parameter SFCC_FORMAT '{$Pipeline.property.COPADO_CHANGE_TRACK_TYPE}' --optional \"xml\"\nfunction_parameter SFCC_INSTANCE '{$Destination.property.SFCC_INSTANCE}'\n# PWA/SFRA required parameters. Parameters can be set as Pipeline or Environment properties\nfunction_parameter SFCC_OAUTH_CLIENT_ID '{$Destination.property.SFCC_OAUTH_CLIENT_ID}' --optional \"\"\nfunction_parameter SFCC_OAUTH_CLIENT_SECRET '{$Destination.property.SFCC_OAUTH_CLIENT_SECRET}' --optional \"\"\nfunction_parameter SFCC_OAUTH_CLIENT_ID1 '{$Pipeline.property.SFCC_OAUTH_CLIENT_ID}' --optional \"\"\nfunction_parameter SFCC_OAUTH_CLIENT_SECRET1 '{$Pipeline.property.SFCC_OAUTH_CLIENT_SECRET}' --optional \"\"\n# SFRA required parameters for `sgmf-scripts`. Parameters can be set as Pipeline or Environment properties\nfunction_parameter SFCC_USERNAME '{$Destination.property.SFCC_USERNAME}' --optional \"\"\nfunction_parameter SFCC_PASSWORD '{$Destination.property.SFCC_PASSWORD}' --optional \"\"\nfunction_parameter SFCC_USERNAME1 '{$Pipeline.property.SFCC_USERNAME}' --optional \"\"\nfunction_parameter SFCC_PASSWORD1 '{$Pipeline.property.SFCC_PASSWORD}' --optional \"\"\n# project configuration while deploying. Defaults to SFRA\nfunction_parameter SFCC_METADATA_DIRECTORY '{$Pipeline.property.SFCC_METADATA_DIRECTORY}' --optional \"metadata\"\nfunction_parameter SFCC_SFRA_DIRECTORY '{$Pipeline.property.SFCC_SFRA_DIRECTORY}' --optional \"\"\nfunction_parameter SFCC_PWA_DIRECTORY '{$Pipeline.property.SFCC_PWA_DIRECTORY}' --optional \"\"\n\n# override the Pipeline with Environment if Environment is not set\n: \"${SFCC_OAUTH_CLIENT_ID:=$SFCC_OAUTH_CLIENT_ID1}\"\n: \"${SFCC_OAUTH_CLIENT_SECRET:=$SFCC_OAUTH_CLIENT_SECRET1}\"\n: \"${SFCC_USERNAME:=$SFCC_USERNAME1}\"\n: \"${SFCC_PASSWORD:=$SFCC_PASSWORD1}\"\n\nfunction prepare_debug_mode() {\n    if [[ \"${COPADO_DEBUG_MODE:-0}\" == 1 ]]; then\n        export GIT_TRACE_PACKET=1 GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_SSH_COMMAND=\"ssh -vvv\" LIMIT_OUTPUT_MAX_LINES=1000\n    fi\n}\n\n\n# GENERATE SCRIPTS FOR THE COMMERCE-CLOUD BUILDERS\n\ncat > /tmp/copado_sfcc_deploy_sfra.sh << '__EOF__'\n#!/bin/bash\nset -euo pipefail\nif [ \"$COPADO_DEBUG_MODE\" == 99 ]; then echo \"COPADO_DEBUG_MODE is in testing mode\"; exit; fi\n\necho \"... authenticating\"\njq --null-input \\\n    --arg instance \"$SFCC_INSTANCE\" \\\n    --arg username \"$SFCC_USERNAME\" \\\n    --arg password \"$SFCC_PASSWORD\" \\\n    --arg code_version \"code_$release_version\" \\\n    '{ \"username\": $username, \"password\": $password, \"hostname\": $instance, \"code-version\": $code_version }' > dw.json\ncopado -p \"... installing dependencies\"\nnpm config set fetch-retry-mintimeout 30000\nnpm config set fetch-retries 5\nnpm config set color false\nnpm --version\nexport TERM=dumb # disable colors\nnpm ci --no-audit --no-fund --no-save\ncopado -p \"... building\"\nnpm run build\nnpm list --depth=0\ncopado -p \"... uploading SFRA cartridges\"\nnpm run uploadCartridge |tee /tmp/uploadCartridge.log\ntail -n1 /tmp/uploadCartridge.log | grep 'Done!$' || { copado -p 'error' -e 'There was an error uploading cartridges. Check the logs for details'; exit 1; }\necho \"... cleanup\"\nif [[ -f dw.json ]]; then rm dw.json; fi\n__EOF__\n\ncat > /tmp/copado_sfcc_deploy_pwa.sh << '__EOF__'\n#!/bin/bash\nset -euo pipefail\nif [ \"$COPADO_DEBUG_MODE\" == 99 ]; then echo \"COPADO_DEBUG_MODE is in testing mode\"; exit; fi\necho \"... building & deploying PWA\"\nnpm run push\n__EOF__\n\ncat > /tmp/copado_sfcc_deploy_metadata.sh << '__EOF__'\n#!/bin/bash\nset -euo pipefail\nD=\"metadata_$release_version\"\nmkdir -p \"/tmp/$D\"\ncp -ar metadata/* \"/tmp/$D/\"\ncd /tmp; zip -r /tmp/$D.zip \"$D\"; cd -\nls -alh \"/tmp/$D.zip\"\nif [ \"$COPADO_DEBUG_MODE\" == 99 ]; then echo \"COPADO_DEBUG_MODE is in testing mode\"; exit; fi\necho \"... authenticating\"\nsfcc-ci client:auth -r\nsfcc-ci instance:add \"$SFCC_INSTANCE\" instance -d\necho \"... uploading\"\nsfcc-ci instance:upload \"/tmp/$D.zip\"\necho \"... importing\"\nsfcc-ci instance:import \"$D.zip\" -s -f -j > /tmp/import_result.json\njq . /tmp/import_result.json\ncopado --uploadfile /tmp/import_result.json\nurl=\"https://$SFCC_INSTANCE/on/demandware.servlet/webdav/Sites/Impex/log/$(jq -r .log_file_name /tmp/import_result.json)\"\necho \"... download log file $url\"\ncurl -Ss -H \"Authorization: Bearer $(sfcc-ci client:auth:token)\" \"$url\" -o /tmp/import_log.txt\ngrep ERROR /tmp/import_log.txt || true\ncopado --uploadfile /tmp/import_log.txt\nif [ \"$(jq -r .status /tmp/import_result.json)\" == 'OK' ]; then exit 0; else exit 1; fi\n__EOF__\n\n\nbuilder_config='[\n{\n    \"builder\": \"metadata_builder\",\n    \"patterns\": \"'\"$SFCC_METADATA_DIRECTORY\"'/*\",\n    \"script\": \"bash /tmp/copado_sfcc_deploy_metadata.sh\",\n    \"build_directory\": \".\"\n},\n{\n    \"builder\": \"sfra_builder\",\n    \"patterns\": \"'\"$SFCC_SFRA_DIRECTORY\"'/*\",\n    \"script\": \"bash /tmp/copado_sfcc_deploy_sfra.sh\",\n    \"build_directory\": \"'\"$SFCC_SFRA_DIRECTORY\"'\"\n},\n{\n    \"builder\": \"pwa_builder\",\n    \"patterns\": \"'\"$SFCC_PWA_DIRECTORY\"'/*\",\n    \"script\": \"bash /tmp/copado_sfcc_deploy_pwa.sh\",\n    \"build_directory\": \"'\"$SFCC_PWA_DIRECTORY\"'\"\n}\n]'\n\n# FUNCTION START\n#mkdir -p /app/retrieve; cd /app/retrieve\nprepare_debug_mode\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite --default-value '[]'\ncopado_log_changes\n\ncopado -p \"fetching branches\"\nprofiler copado_git --depth \"$git_depth\" \"$promotion_branch\" \"$target_branch\"\n\ncopado -p \"Merging branches\"\ngit checkout \"$promotion_branch\"\ngit checkout \"$target_branch\"\n# merge before deploying, to fail early if the merge cannot happen due to conflicts\ngit merge --no-progress \"$promotion_branch\" | limit_output \\\n    || copado_finish  1 \"git merge failed\" \"{}\" \"Could not merge promotion branch into destination branch\"\n\ncopado -p \"Applying replacement rules and environment rules...\"\necho \"$replacement_rules\" > ~/.replacement_rules.json\necho \"$environment_variables\" > ~/.environment_variables.json\nprofiler copado_replacer --branch \"$target_branch\"\n\necho \"$builder_config\" > ~/.builder_config.json\n\nexport NODE_OPTIONS=--max_old_space_size=1000\n\nif [ \"$dry_run\" == 'true' ]; then\n    copado -p \"Deploying (dry run) the promotion branch\"\n    # NOTE: sfcc-ci does not have a dry-run version\n    profiler copado_builder\n    copado_finish 0 \"Deployment (dry run) successful\" \"{}\" \"\"\nelse\n    copado -p \"Deploying the changes of the promotion branch $promotion_branch\"\n    profiler copado_builder\n    copado -p \"Pushing git result\"\n    git checkout -- .  # clear any change made by copado_replacer\n    profiler git push --all origin \\\n        || copado_finish 1 \"Deployment successful, but git merge failed\" \"{}\" \"Could not merge promotion branch into destination branch\"\n\n    copado_finish 0 \"Deployment successful\" \"{}\" \"\"\nfi",
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "Id": "a0n7Q000000IFqUQAW",
          "Name": "copado_sfcc_deploy"
        },
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v56.0/sobjects/copado__Function__c/a0n7Q000000IFqZQAW"
          },
          "copado__API_Name__c": "copado_sfcc_commit",
          "copado__Image_Name__c": "xa8dyypiudcgpewgbkt69xfy1ibhap-custom-image:v1.0.2-develop",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"COPADO_DEVOPSTOOLS_URL\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"feature_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.featureBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"recreate_if_exists\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.recreateFeatureBranch}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"commit_message\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.message}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"base_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.baseBranch}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"replacement_rules\",\n  \"defaultValue\" : \"{$Pipeline.property.replacement_rules}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"environment_variables\",\n  \"defaultValue\" : \"{$Source.apex.EnvironmentVariables}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"executeCommit\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.executeCommit}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"COPADO_DEBUG_MODE\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_DEBUG_MODE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_FORMAT\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_CHANGE_TRACK_TYPE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_INSTANCE\",\n  \"defaultValue\" : \"{$Source.property.SFCC_INSTANCE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_ID\",\n  \"defaultValue\" : \"{$Source.property.SFCC_OAUTH_CLIENT_ID}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_SECRET\",\n  \"defaultValue\" : \"{$Source.property.SFCC_OAUTH_CLIENT_SECRET}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_ID1\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_OAUTH_CLIENT_ID}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"SFCC_OAUTH_CLIENT_SECRET1\",\n  \"defaultValue\" : \"{$Pipeline.property.SFCC_OAUTH_CLIENT_SECRET}\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -eo pipefail\nexport SHELLOPTS # export the settings for all subshells. Be careful with the \"u\" flag, some tools (maven) fails.\n\n# the following line should be removed in the actual production Functions. It is used for internal testing and development\nif [ -n \"${COPADO_DEVOPSTOOLS_URL:-}\" ]; then pip install --user \"$COPADO_DEVOPSTOOLS_URL\"  ${COPADO_DEVOPSTOOLS_VERSION:+\"$COPADO_DEVOPSTOOLS_VERSION\"}; export PATH=$PATH:~/.local/bin; echo \"(${SECONDS}s elapsed)\"; echo; fi\ncd /app\n\nsource copado_init\n# the next two lines are for testing/development/troubleshooting only:\n#function_image xa8dyypiudcgpewgbkt69xfy1ibhap-custom-image:v1.0.2-develop\nfunction_parameter COPADO_DEVOPSTOOLS_URL '{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}' --optional \"\"\n\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}' --optional \"100\"\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter feature_branch '{$Context.JobExecution__r.DataJson.featureBranchName}'\nfunction_parameter recreate_if_exists '{$Context.JobExecution__r.DataJson.recreateFeatureBranch}'\nfunction_parameter commit_message '{$Context.JobExecution__r.DataJson.message}'\nfunction_parameter base_branch '{$Context.JobExecution__r.DataJson.baseBranch}'\nfunction_parameter replacement_rules '{$Pipeline.property.replacement_rules}' --optional \"\"\nfunction_parameter environment_variables '{$Source.apex.EnvironmentVariables}' --optional \"\"\nfunction_parameter executeCommit '{$Context.JobExecution__r.DataJson.executeCommit}' --optional \"true\"\nfunction_parameter COPADO_DEBUG_MODE '{$Pipeline.property.COPADO_DEBUG_MODE}' --optional \"0\"\n# sfcc-specific parameters\nfunction_parameter SFCC_FORMAT '{$Pipeline.property.COPADO_CHANGE_TRACK_TYPE}' --optional \"xml\"\nfunction_parameter SFCC_INSTANCE '{$Source.property.SFCC_INSTANCE}'\n# PWA/SFRA required parameters. Parameters can be set as Pipeline or Environment properties\nfunction_parameter SFCC_OAUTH_CLIENT_ID '{$Source.property.SFCC_OAUTH_CLIENT_ID}' --optional \"\"\nfunction_parameter SFCC_OAUTH_CLIENT_SECRET '{$Source.property.SFCC_OAUTH_CLIENT_SECRET}' --optional \"\"\nfunction_parameter SFCC_OAUTH_CLIENT_ID1 '{$Pipeline.property.SFCC_OAUTH_CLIENT_ID}' --optional \"\"\nfunction_parameter SFCC_OAUTH_CLIENT_SECRET1 '{$Pipeline.property.SFCC_OAUTH_CLIENT_SECRET}' --optional \"\"\n\n# override the Pipeline with Environment if Environment is not set\n: \"${SFCC_OAUTH_CLIENT_ID:=$SFCC_OAUTH_CLIENT_ID1}\"\n: \"${SFCC_OAUTH_CLIENT_SECRET:=$SFCC_OAUTH_CLIENT_SECRET1}\"\n\nexport SFCC_CREDENTIALS=\"${SFCC_OAUTH_CLIENT_ID}:${SFCC_OAUTH_CLIENT_SECRET}\"\n\nfunction prepare_debug_mode() {\n    if [[ \"${COPADO_DEBUG_MODE:-0}\" == 1 ]]; then\n        export GIT_TRACE_PACKET=1 GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_SSH_COMMAND=\"ssh -vvv\" LIMIT_OUTPUT_MAX_LINES=1000\n    fi\n}\n\nfunction generate_ymls() {\n    cat ~/.ccmetadata_filenames.txt\n    while IFS= read -r changedXMLFile; do\n        if [ -f \"$changedXMLFile\" ]; then\n            ymlFileName=\"${changedXMLFile/.xml/.yml}\"\n            yq -p=xml '.' $changedXMLFile > $ymlFileName\n            rm \"$changedXMLFile\"\n        fi\n    done < ~/.ccmetadata_filenames.txt\n}\n\nfunction retrieve_changes_metadata() {\n    # convert the changes with  to the file ~/instance_export.json\npython - <<'__EOF__'\n#!/usr/bin/env python3\nimport os, json\nfrom pathlib import Path\n\nwith open(os.path.join(Path.home(), '.changes.json'), 'r') as f:\n    changes = json.load(f)\nreq = {}\nfor change in changes:\n    if change.get('c') != 'ccmetadata':\n        continue\n    prev, current = req, req\n    for p in change['n'].split('/')[1:]:\n        current.setdefault(p, {})\n        prev, current = current, current[p]\n    prev[p] = True\n\nif req:\n    with open(os.path.join(Path.home(), 'instance_export.json'), 'w') as f:\n        json.dump(req, f, indent=4)\n\n__EOF__\n\n    # start of mock for internal testing\n    if [ \"$COPADO_DEBUG_MODE\" == 99 ]; then\n        python - <<__EOT__\n# NOTE: this is for MOCKING the files, temporarily, until we have access to sfcc dev orgs\nimport os, json; from pathlib import Path\nwith open(os.path.join(Path.home(), '.changes.json'), 'r') as f: changes = json.load(f)\nfor change in changes:\n    fn = os.path.join('/tmp/retrieve', change['n']+'.'+change['t'])\n    if not os.path.exists(fn):\n        os.makedirs(os.path.dirname(fn), exist_ok=True)\n        with open(fn,'w') as f: f.write('<xml></xml>')\n__EOT__\n        echo \"COPADO_DEBUG_MODE is in testing mode\"; return\n    fi\n    # start of mock for internal testing\n\n    echo \"... authenticating\"\n    sfcc-ci client:auth -r\n    sfcc-ci instance:add \"$SFCC_INSTANCE\" instance -d\n\n    file=copado_retrieve.zip\n    url=\"https://$SFCC_INSTANCE/on/demandware.servlet/webdav/Sites/Impex/src/instance/$file\"\n    echo \"... remove old file, if any\"\n    curl -Ss -X DELETE -H \"Authorization: Bearer $(sfcc-ci client:auth:token)\" \"$url\" || true\n    echo \"... run export\"\n    sfcc-ci instance:export -d \"$(cat ~/instance_export.json)\" -f \"$file\" --sync --failfast\n    echo \"... download the resulting file\"\n    curl -Ss -H \"Authorization: Bearer $(sfcc-ci client:auth:token)\" \"$url\" -o \"/tmp/$file\"\n    ls -al \"/tmp/$file\"\n    echo \"... unzip the results of sfcc-ci instance:export in the retrieve/metadata directory...\"\n    unzip -d /tmp/retrieve/metadata \"/tmp/$file\"\n    rm /tmp/retrieve/metadata/copado_retrieve/version.txt\n    mv /tmp/retrieve/metadata/copado_retrieve/* /tmp/retrieve/metadata/\n    rm -fr /tmp/retrieve/metadata/copado_retrieve\n}\n\nfunction retrieve_changes() {\n    mkdir -p  /tmp/retrieve /tmp/mock\n    copado_file_mapper --filter-category ccmetadata --root-directory /tmp/retrieve/ > ~/.ccmetadata_filenames.txt\n    if test -s ~/.ccmetadata_filenames.txt; then\n        # If there is ANY metadata (category=\"ccmetadata\") selected, retrieve it\n        retrieve_changes_metadata\n        if [ \"${SFCC_FORMAT,,}\" == 'yml' ]; then\n            copado -p \"track change format set to YML\"\n            generate_ymls\n        fi\n    else\n        echo '[retrieve] no metadata changes (category=ccmetadata) to retrieve'\n    fi\n    copado_file_mapper --filter-category \"\" --root-directory /tmp/retrieve/ --mock-retrieve\n}\n\nfunction merge_retrieved_changes() {\n    echo '[merge] merge the retrieved files into the repository'\n    cp -avfT /tmp/retrieve/ . | limit_output\n    echo '[merge] delete any change marked as deletion'\n    copado_file_mapper --filter-action delete --delete | limit_output\n}\n\n# if it was a local commit, just finish. There is nothing to do.\nif [[ \"$executeCommit\" == \"false\" ]]; then\n    echo \"cli-commit, no action will be taken\"\n    exit 0;\nfi\n\n# FUNCTION START\n#mkdir -p /app/retrieve; cd /app/retrieve\nprepare_debug_mode\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite --default-value '[]'\ncopado_log_changes\n\ncopado -p \"Retrieving changes\"\nprofiler retrieve_changes\n\ncopado -p \"Fetching branches\"\nprofiler copado_git --depth \"$git_depth\" \"$base_branch\"\nif [[ \"$recreate_if_exists\" == \"true\" && -n \"$(git ls-remote -h origin \"$feature_branch\")\" ]]; then\n    echo \"[git delete] re-create feature branch\"\n    git push origin --quiet --delete \"$feature_branch\" || true\nfi\nprofiler copado_git --depth \"$git_depth\" -c \"$feature_branch\"\n\ncopado -p \"Merging changes\"\nprofiler merge_retrieved_changes\n\ncopado -p \"Applying replacement rules\"\necho \"$replacement_rules\" > ~/.replacement_rules.json\necho \"$environment_variables\" > ~/.environment_variables.json\nprofiler copado_replacer --env-vars-replace-names --branch \"$feature_branch\"\n\necho '[git commit]'\nprofiler git add .\ngit commit -am \"$commit_message\" -- | limit_output \\\n    || copado_finish 0 \"No changes\" '{\"status\": \"No changes\"}' \"\"\n\ncopado -p \"Pushing branch\"\nprofiler git push origin \"$feature_branch\"\ncopado -p \"Commit completed successfully (${SECONDS}s)\" -r '{\"status\": \"Complete\", \"commitId\": \"'\"$(git rev-parse HEAD)\"'\"}'",
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "Id": "a0n7Q000000IFqZQAW",
          "LastReferencedDate": "2022-10-26T11:09:34.000+0000",
          "LastViewedDate": "2022-10-26T11:09:34.000+0000",
          "Name": "copado_sfcc_commit"
        },
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v56.0/sobjects/copado__Function__c/a0n7Q000000IFqeQAG"
          },
          "copado__API_Name__c": "copado_sfcc_promote",
          "copado__Image_Name__c": "xa8dyypiudcgpewgbkt69xfy1ibhap-custom-image:v1.0.2-develop",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"COPADO_DEVOPSTOOLS_URL\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_email\",\n  \"defaultValue\" : \"{$User.Email}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_name\",\n  \"defaultValue\" : \"{$User.Name}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"git_depth\",\n  \"defaultValue\" : \"{$Pipeline.property.git_depth}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"file_changes_id\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.promotionBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"target_branch\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.destinationBranchName}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"user_stories\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.DataJson.userStoryBranches}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"promotion_id\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"repository_id\",\n  \"defaultValue\" : \"{$Pipeline.Git_Repository__r.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"release_version\",\n  \"defaultValue\" : \"{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"exclude_autoresolve\",\n  \"defaultValue\" : \"{$Pipeline.property.exclude_autoresolve}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"conflict_resolution_attachments\",\n  \"defaultValue\" : \"{$Context.apex.GetConflictResolutionAttachments}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"smart_conflict_resolution_enabled\",\n  \"defaultValue\" : \"{$Pipeline.property.smart_conflict_resolution_enabled}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"COPADO_DEBUG_MODE\",\n  \"defaultValue\" : \"{$Pipeline.property.COPADO_DEBUG_MODE}\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -eo pipefail\nexport SHELLOPTS # export the settings for all subshells. Be careful with the \"u\" flag, some tools (maven) fails.\n\n# the following line should be removed in the actual production Functions. It is used for internal testing and development\nif [ -n \"${COPADO_DEVOPSTOOLS_URL:-}\" ]; then pip install --user \"$COPADO_DEVOPSTOOLS_URL\"  ${COPADO_DEVOPSTOOLS_VERSION:+\"$COPADO_DEVOPSTOOLS_VERSION\"}; export PATH=$PATH:~/.local/bin; echo \"(${SECONDS}s elapsed)\"; echo; fi\ncd /app\n\nsource copado_init\n# the next two lines are for testing/development/troubleshooting only:\n#function_image xa8dyypiudcgpewgbkt69xfy1ibhap-custom-image:v1.0.2-develop\nfunction_parameter COPADO_DEVOPSTOOLS_URL '{$Pipeline.property.COPADO_DEVOPSTOOLS_URL}' --optional \"\"\n\nfunction_parameter git_json '{$Context.Repository.Credential}'\nfunction_parameter git_email '{$User.Email}'\nfunction_parameter git_name '{$User.Name}'\nfunction_parameter git_depth '{$Pipeline.property.git_depth}' --optional \"100\"\nfunction_parameter file_changes_id '{$Context.JobExecution__r.DataJson.fileWithSelectedChanges}'\nfunction_parameter promotion_branch '{$Context.JobExecution__r.DataJson.promotionBranchName}'\nfunction_parameter target_branch '{$Context.JobExecution__r.DataJson.destinationBranchName}'\nfunction_parameter user_stories '{$Context.JobExecution__r.DataJson.userStoryBranches}'\nfunction_parameter promotion_id '{$Job.ExecutionParent.Id}'\nfunction_parameter repository_id '{$Pipeline.Git_Repository__r.Id}'\nfunction_parameter release_version '{$Context.JobExecution__r.Promotion__r.Release__r.Version__c}' --optional \"\"\nfunction_parameter exclude_autoresolve '{$Pipeline.property.exclude_autoresolve}' --optional \"\"\nfunction_parameter conflict_resolution_attachments '{$Context.apex.GetConflictResolutionAttachments}'\nfunction_parameter smart_conflict_resolution_enabled '{$Pipeline.property.smart_conflict_resolution_enabled}' --optional \"false\"\nfunction_parameter COPADO_DEBUG_MODE '{$Pipeline.property.COPADO_DEBUG_MODE}' --optional \"0\"\n\n\nfunction prepare_debug_mode() {\n    if [[ \"${COPADO_DEBUG_MODE:-0}\" == 1 ]]; then\n        export GIT_TRACE_PACKET=1 GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_SSH_COMMAND=\"ssh -vvv\" LIMIT_OUTPUT_MAX_LINES=1000\n    fi\n}\n\nfunction fail_if_online_conflict_required() {\n    local exit_code=\"$1\"\n    if [[ $exit_code -eq 22 ]]; then\n        copado_finish 22 \"Conflict found while merging\" '{\"status\": \"conflicts\"}' \"Online conflict resolution required. Please correct the conflicts in the Promotion\"\n    fi\n}\n\nfunction fail_if_review_failed() {\n    local exit_code=\"$1\"\n    if [[ $exit_code -ne 0 ]]; then\n        copado_finish \"$exit_code\" \"Error reviewing conflicts. The error code was $exit_code\" \"\" \"Error reviewing conflicts. Please review the Logs of the operation\";\n    fi\n}\n\nfunction git_checkout_feature_branches() {\n    for merge_branch in \"${branches[@]}\"; do\n        git checkout -q \"$merge_branch\"\n    done\n}\n\n# get the feature branches from the parameters, filter out branches that do not exist in the remote, and leave the\n# result in the \"$branches\" variable\nfunction parse_feature_branches() {\n    jq -r -c '.[]' <<< \"$user_stories\" > ~/.git_branches.txt\n    readarray -t branches < ~/.git_branches.txt\n    echo \"[feature_branches] reading feature branches  ${branches[*]};\"\n    git ls-remote -h origin -- \"${branches[@]}\" | sed -e 's|^.*refs/heads/||g' > ~/.git_branches.txt\n    readarray -t branches < ~/.git_branches.txt\n    echo \"[feature_branches] existing feature branches ${branches[*]};\"\n}\n\n# merge each branch, in order, to the feature branch, resolving merges and conflicts, and committing the changes, if any.\nfunction merge_copado() {\n    local usNo=1\n    local usTotal=\"${#branches[@]}\"\n    for merge_branch in \"${branches[@]}\"; do\n        copado -p \"merging $usNo/$usTotal $merge_branch\"\n        # never fail, copado will process the result\n        git merge -- \"$merge_branch\" | limit_output || true\n        git status --porcelain=v2 > ~/.git_merge_result.txt\n        exit_code=0; copado_conflict_resolution --promotion-id \"$promotion_id\" --feature-branch \"$merge_branch\" | limit_output || exit_code=$?\n        fail_if_online_conflict_required $exit_code\n        fail_if_review_failed $exit_code\n        git add .\n        # never fail, there might not be anything to commit\n        git commit -am \"Copado automatic merge of $merge_branch\" || true\n        (( usNo++ ))\n    done\n}\n\n# FUNCTION START\n#mkdir -p /app/retrieve; cd /app/retrieve\nprepare_debug_mode\ncopado_files --download-id \"$file_changes_id\" --destination ~/.changes.json --do-not-overwrite --default-value '[]'\ncopado_log_changes\n\ncopado -p \"Preparing repository\"\ncopado_git --initialize-only \"$target_branch\"\nparse_feature_branches\n\ncopado -p \"Fetching branches\"\nprofiler copado_git --depth \"$git_depth\" -- \"$target_branch\" \"${branches[*]}\"\nprofiler git_checkout_feature_branches\n\necho \"[promotion] creating promotion branch\"\ngit checkout -b \"$promotion_branch\" \"$target_branch\"\n\ncopado -p \"Merging branches into promotion\"\necho \"$conflict_resolution_attachments\" > ~/.online_resolved.json\nprofiler merge_copado\n\ncopado_log_git_history \"$target_branch\" \"$promotion_branch\"\n\ncopado -p \"Pushing branch\"\n# delete the remote branch if it already exists, never fail\n[[ -n \"$(git ls-remote -h origin \"$promotion_branch\")\" ]] \\\n    && { git push origin --quiet --delete \"$promotion_branch\" || true; }\n\n# tag the release, if present\n[[ -n \"$release_version\" ]] && git tag \"$release_version\"\nprofiler git push origin --follow-tags \"$promotion_branch\"\n\ncopado_finish 0 \"Promote completed successfully\" ''",
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "Id": "a0n7Q000000IFqeQAG",
          "Name": "copado_sfcc_promote"
        }
      ],
      "ObjectType": "copado__Function__c"
    }
  ],
  "blobsByUID": {}
}